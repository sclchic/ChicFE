{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["calculateWinner","squares","lines","i","length","_lines$i","Object","slicedToArray","a","b","c","Square","react_default","createElement","className","onClick","this","props","value","Component","Board","_this","App_Square","renderSquare","Game","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","xIsNext","stepNumber","handleClick","bind","assertThisInitialized","step","setState","slice","concat","status","_this3","current","winner","moves","map","move","desc","key","jumpTo","App_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11d66cf5.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.scss';\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\n\nclass Square extends Component {\n    render() {\n        return (\n            <button \n                className=\"square\" \n                onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\n\nclass Board extends Component {\n    renderSquare(i) {\n        return (\n            <Square \n                value={this.props.squares[i]} \n                onClick={() => this.props.onClick(i)}/>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"border\">\n                <div className=\"border-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"border-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"border-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            xIsNext: true,\n            stepNumber: 0,\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        });\n    }\n    \n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>\n                        {desc}\n                    </button>\n                </li>\n            );\n        })\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status =  'Next player:' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}/>\n                </div>\n                <div className=\"game-info\">\n                    <div>\n                        {status}\n                    </div>\n                    <ol>\n                        {moves}\n                    </ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}